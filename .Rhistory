mynewdata$get()
mynewdata$getMean()
makeCacheMatrix <- function(x = numeric()){
#        size <- 4
#        numbers <- 16
#
#        if (!is.null(x)) {
#                size <- x
#                numbers <- x * x
#        }
#invertibleMatrix <- NULL
inverseMatrix <- NULL
invertibleMatrix <- matrix(rnorm(16, 5), 4, 4)
#invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
getInvertible <- function() invertibleMatrix
getInverse <- function() inverseMatrix
calcInverse <- function(){
inverseMatrix <<- solve(invertibleMatrix) %*% invertibleMatrix
}
get
#setInverse <- function() m <<- mean
#getmean <- function() m
list(getInvertible = getInvertible, getInverse = getInverse, calcInverse = calcInverse)
}
mynewdata <- makeCacheMatrix()
mynewdata$getInvertible()
mynewdata$getInvertible()
mynewdata$getInverse()
mynewdata$calcInverse()
mynewdata$getInverse()
m <- <- matrix(rnorm(16, 5), 4, 4)
m <- matrix(rnorm(16, 5), 4, 4)
det(m)
m <- matrix(rnorm(16, 5), 4, 4)
det(m)
m <- matrix(rnorm(16, 5), 4, 4)
det(m)
makeCacheMatrix <- function(){
invertibleMatrix <- matrix(rnorm(16, 5), 4, 4))
invertibleMatrix
}
makeCacheMatrix <- function(){
invertibleMatrix <- matrix(rnorm(16, 5), 4, 4)
invertibleMatrix
}
mynewdata <- makeCacheMatrix()
mynewdata
det(mynewdata)
det(mynewdata)
det(mynewdata)
makeCacheMatrix <- function(x){
if(!is.na(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix()
mynewdata <- makeCacheMatrix(5)
mynewdata
makeCacheMatrix <- function(x){
size <- 4
numbers <- 16
if(!is.na(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix(5)
mynewdata <- makeCacheMatrix()
makeCacheMatrix <- function(x){
x <- 4
if(!is.na(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix()
mynewdata
mynewdata <- makeCacheMatrix(5)
mynewdata
makeCacheMatrix <- function(x = numeric() ){
if(!is.na(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix()
makeCacheMatrix <- function(x = NULL){
size <- 4
numbers <- 16
if(!is.na(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix()
mynewdata <- makeCacheMatrix(5)
mynewdata
makeCacheMatrix <- function(x = NULL){
size <- 4
numbers <- 16
if(x == NULL){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix()
makeCacheMatrix <- function(x = NULL){
size <- 4
numbers <- 16
if(x = NULL){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
makeCacheMatrix <- function(x = NULL){
size <- 4
numbers <- 16
if(!is.null(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix()
mynewdata
mynewdata <- makeCacheMatrix(6)
mynewdata
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
setInvertible <- function(y){
invertibleMatrix <<- y
inverseMatrix <- NULL
}
getInvertible <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(){
inverseMatrix <<- solve(invertibleMatrix) %*% invertibleMatrix
}
list(getInvertible = getInvertible, getInverse = getInverse, calcInverse = calcInverse)
}
makeCacheMatrix <- function(x = NULL){
size <- 4
numbers <- 16
if(!is.null(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix(6)
makeCacheMatrix <- function(x = NULL){
size <- 4
numbers <- 16
if(!is.null(x)){
size <- x
numbers <- x * x
}
invertibleMatrix <- matrix(rnorm(numbers, 5), size, size)
invertibleMatrix
}
mynewdata <- makeCacheMatrix(10)
mynewdata
det(mynewdata)
mynewdata <- makeCacheMatrix(0)
mynewdata
mynewdata <- makeCacheMatrix()
mynewdata
det(mynewdata)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
test <- makeVector()
test
test$get()
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(){
inverseMatrix <<- solve(invertibleMatrix) %*% invertibleMatrix
}
list(getInvertible = getInvertible, getInverse = getInverse, calcInverse = calcInverse)
}
testassignment <- makeCacheMatrix()
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(){
inverseMatrix <<- solve(invertibleMatrix) %*% invertibleMatrix
}
list(set = set, get = get, getInverse = getInverse, setInverse = setInverse)
}
testassignment <- makeCacheMatrix()
test$get()
testassignment$get()
testassignment$getInverse()
estmatrix <- matrix(rnorm(16, 5), 4, 4)
testmatrix <- matrix(rnorm(16, 5), 4, 4)
testassignment$set(testmatrix)
testassignment$get()
testassignment$getInverse()
testassignment$setInverse()
testassignment$getInverse()
testassignment$set(testmatrix)
testassignment$get()
testassignment$getInverse()
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <<- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(){
inverseMatrix <<- solve(invertibleMatrix) %*% invertibleMatrix
}
list(set = set, get = get, getInverse = getInverse, setInverse = setInverse)
}
testassignment <- makeCacheMatrix()
testassignment$get()
testassignment$getInverse()
testassignment$setInverse()
testassignment$getInverse()
testassignment$set(testmatrix)
testassignment$get()
testassignment$getInverse()
testassignment$setInverse()
testassignment$getInverse()
testassignment$set(testmatrix)
testassignment$get()
testassignment$getInverse()
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <<- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(inversed) inverseMatrix <<- inversed
#                inverseMatrix <<- solve(invertibleMatrix) %*% invertibleMatrix
#        }
list(set = set, get = get, getInverse = getInverse, setInverse = setInverse)
}
cachemean <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
testassignment <- makeCacheMatrix()
cachmean(testassignment)
cachemean(testassignment)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
testassignment$set(testmatrix)
testassignment$get()
testassignment$getInverse()
cacheSolve(testassignment)
testassignment$getInverse()
testassignment$set(testmatrix)
testassignment$get()
testassignment$getInverse()
cacheSolve(testassignment)
testassignment$set(testmatrix)
cacheSolve(testassignment)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
testassignment <- makeCacheMatrix()
testassignment$set(testmatrix)
cacheSolve(testassignment)
cacheSolve(testassignment)
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <<- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(inversed) inverseMatrix <<- inversed
list(set = set, get = get, getInverse = getInverse, setInverse =
setInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
testassignment <- makeCacheMatrix()
testmatrix <- matrix(rnorm(16, 5), 4, 4)
testassignment$set(testmatrix)
cacheSolve(testassignment)
cacheSolve(testassignment)
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <<- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(inversed) inverseMatrix <<- inversed
list(set = set, get = get, getInverse = getInverse, setInverse =
setInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
testassignment <- makeCacheMatrix()
testassignment$get()
testassignment$getInverse()
testassignment$setInverse()
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <<- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(inversed = NULL) inverseMatrix <<- inversed
list(set = set, get = get, getInverse = getInverse, setInverse =
setInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
testassignment <- makeCacheMatrix()
testassignment$get()
testassignment$getInverse()
testassignment$setInverse()
testassignment$getInverse()
testmatrix <- matrix(rnorm(16, 5), 4, 4)
testassignment$set(testmatrix)
testassignment$get()
testassignment$setInverse()
testassignment$getInverse()
cacheSolve(testassignment)
testassignment$getInverse()
testassignment$set(testmatrix)
testassignment$getInverse()
testassignment$setInverse(testmatrix)
testassignment$getInverse()
testassignment$get()
testassignment$setInverse(testmatrix)
testassignment$getInverse()
testassignment$setInverse(solve(testmatrix) %*% testmatrix)
testassignment$getInverse()
?solve
makeCacheMatrix <- function(invertibleMatrix = matrix()){
inverseMatrix <- NULL
set <- function(y){
invertibleMatrix <<- y
inverseMatrix <<- NULL
}
get <- function() invertibleMatrix
getInverse <- function() inverseMatrix
setInverse <- function(inversed = NULL) inverseMatrix <<- inversed
list(set = set, get = get, getInverse = getInverse, setInverse =
setInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data) #%*% data
x$setInverse(m)
m
}
testassignment <- makeCacheMatrix()
testmatrix <- matrix(rnorm(16, 5), 4, 4)
testassignment$set(testmatrix)
cacheSolve(testassignment)
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y){
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
getInverse <- function() inverseMatrix
setInverse <- function(inversed = NULL) inverseMatrix <<- inversed
list(set = set, get = get, getInverse = getInverse, setInverse =
setInverse)
}
setwd("C:/Users/tjd/RWeek3/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y){
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
getInverse <- function() inverseMatrix
setInverse <- function(inversed = NULL) inverseMatrix <<- inversed
list(set = set, get = get, getInverse = getInverse, setInverse =
setInverse)
}
## Computes the inverse of the special "matrix" returned by makeCacheMatrix
## above.
## If the inverse has already been calculated (and the matrix has not changed),
## then retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data) #%*% data
x$setInverse(m)
m
}
assignmentWeek3 <- makeCacheMatrix()
assignmentWeek3$get()
assignmentWeek3$getInverse()
assignmentWeek3$setInverse()
assignmentWeek3$getInverse()
testmatrix <- matrix(rnorm(16, 5), 4, 4)
assignmentWeek3$set(testmatrix)
assignmentWeek3$get()
assignmentWeek3$getInverse()
cacheSolve(assignmentWeek3)
assignmentWeek3$getInverse()
cacheSolve(assignmentWeek3)
